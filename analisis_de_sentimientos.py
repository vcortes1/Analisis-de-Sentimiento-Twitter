# -*- coding: utf-8 -*-
"""Analisis de sentimientos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15jQWcrHwbxPAYd-m1y8lBPSbueGTl4zG

#Librerias
"""

import pandas as pd
from textblob import TextBlob
import re
import time
import string

"""#Importamos Documento"""

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials


# Authenticate and create the PyDrive client.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

from google.colab import drive
drive.mount('/content/drive')

link = 'https://docs.google.com/spreadsheets/d/1vQ6uZf5x5Z5_s9H-nXXha_eat-FFElI3/edit?usp=share_link&ouid=101497526208439122592&rtpof=true&sd=true'

import pandas as pd

# to get the id part of the file
id = link.split("/")[-2]

downloaded = drive.CreateFile({'id':id})
downloaded.GetContentFile('Menciones.xlsx')

df = pd.read_excel('Menciones.xlsx')
df.head(10)

df.head(10)

"""Creamos una muestra"""

from datetime import datetime

muestra= df.sample(20)

muestra['fecha_publicacion'] = pd.to_datetime(muestra['fecha_publicacion'])

def mes(numero):
  if numero == 1:
    return 'Enero'
  if numero == 2:
    return 'Febrero'
  if numero == 3:
    return 'Marzo'
  if numero == 4:
    return 'Abril'
  if numero == 5:
    return 'Mayo'
  if numero == 6:
    return 'Junio'
  if numero == 7:
    return 'Julio'
  if numero == 8:
    return 'Agosto'
  if numero == 9:
    return 'Septiembre'
  if numero == 10:
    return 'Octubre'
  if numero == 11:
    return 'Noviembre'
  if numero == 12:
    return 'Diciembre'

muestra['Mes'] =muestra['fecha_publicacion'].dt.month

muestra['Mes'] =muestra['Mes'].apply(mes)



print(muestra.dtypes)
muestra.head()

"""Limpieza de texto"""

muestra['cuerpo'] = muestra['cuerpo'].str.lower()
muestra['cuerpo'] =muestra['cuerpo'].str.replace('rt','')

caracteres =['-', ',','´','.','1','2','3','4','5','6','7','8','9','0','120382','#','&','http\S+', 'RT', ':','@', ';', '\\n','!', '\\r', '\ ' , '?','¿','%','(',')','/','“','|',]

for j in caracteres:#se quitan numeros y otros caracteres indeseados
  muestra['cuerpo']=muestra['cuerpo'].str.replace(j," ")

  muestra['cuerpo'].str.strip()


muestra.head(10)

"""Limpieza base completa"""

df['cuerpo'] = df['cuerpo'].str.lower()
df['cuerpo'] =df['cuerpo'].str.replace('rt','')

caracteres =['-', ',','´','.','1','2','3','4','5','6','7','8','9','0','120382','#','&','http\S+', 'RT', ':','@', ';', '\\n','_','!', '\\r', '\ ','?','¿','%','(',')','/','“','|' ]

for j in caracteres:#se quitan numeros y otros caracteres indeseados
  df['cuerpo']=df['cuerpo'].str.replace(j," ")


df['cuerpo'].str.strip()


muestra.head(10)

"""Eliminamos las stopwords"""

import nltk
nltk.download('stopwords')

from nltk.corpus import stopwords
stop = stopwords.words('spanish')

muestra['cuerpo'] = muestra['cuerpo'].apply(lambda x: ' '.join ([word for word in x.split()  if word not in (stop)]))

"""Stopwords de base completa"""

df['cuerpo'] = df['cuerpo'].apply(lambda x: ' '.join ([word for word in x.split()  if word not in (stop)]))

"""Definimos funcion que analiza el sentimiento (no funciona tanto para español)"""

import nltk as nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer
nltk.download('vader_lexicon')

sia=SentimentIntensityAnalyzer()

muestra['Polaridad']=muestra['cuerpo'].apply(lambda x: sia.polarity_scores(x)['compound'])

"""Analisis de sentimientos base completa"""

df['Polaridad']=df['cuerpo'].apply(lambda x: sia.polarity_scores(x)['compound'])

"""Libreria que es especifica para lenguaje en español"""

!pip install sentiment-analysis-spanish

from sentiment_analysis_spanish import sentiment_analysis

sentiment = sentiment_analysis.SentimentAnalysisSpanish()

muestra['puntaje'] = muestra['cuerpo'].apply(lambda x: sentiment.sentiment(x))

"""Analisis de sentimientos base completa"""

df['puntaje'] = df['cuerpo'].apply(lambda x: sentiment.sentiment(x))

df['puntaje'].head()

"""Mostramos el resultado"""

muestra.head()

"""Definimos funcion para asignar sentimiento"""

def sentimiento(numero):
  if numero < 0.4:
    return 'Negativo'
  elif numero > 0.6:
    return 'Positivo'
  else:
    return 'Neutro'

"""Aplicamos funcion"""

muestra['sentimiento'] = muestra['puntaje'].apply(sentimiento)

print(muestra[['sentimiento','puntaje']])

muestra_porfecha= muestra.groupby(['fecha_publicacion'])[['puntaje']].mean()

muestra_porfecha['sentimiento']= muestra_porfecha['puntaje'].apply(sentimiento)

muestra_porfecha.head()

"""Aplicamos funcion a toda la base"""

df['sentimiento'] = df['puntaje'].apply(sentimiento)

print(df[['sentimiento','puntaje']])

"""Promedio de sentimientos de todos los tweets"""

print(df['puntaje'].mean())

"""Obtenemos los meses del año"""

df['fecha_publicacion'] = pd.to_datetime(df['fecha_publicacion'])

df['Mes'] =df['fecha_publicacion'].dt.month

def mes(numero):
  if numero == 1:
    return 'Enero'
  if numero == 2:
    return 'Febrero'
  if numero == 3:
    return 'Marzo'
  if numero == 4:
    return 'Abril'
  if numero == 5:
    return 'Mayo'
  if numero == 6:
    return 'Junio'
  if numero == 7:
    return 'Julio'
  if numero == 8:
    return 'Agosto'
  if numero == 9:
    return 'Septiembre'
  if numero == 10:
    return 'Octubre'
  if numero == 11:
    return 'Noviembre'
  if numero == 12:
    return 'Diciembre'

df['Mes'] =df['Mes'].apply(mes)

df['Mes'].head(10)

"""Sentimiento promedio por mes"""

df_pormes= df.groupby(['Mes'])[['puntaje']].mean()

df_pormes['sentimiento']= df_pormes['puntaje'].apply(sentimiento)

df_pormes.head()

"""Contamos cuantos comentarios positivos, negativos y neutros hay dentro de la data"""

df['sentimiento'].value_counts()

"""Graficamos los resultados"""

import matplotlib.pyplot as plt

etiquetas = 'Negativo', 'Neutro', 'Positivo'
colores = ['#29A0B1','#167D7F','#98D7C2']
plt.pie(df['sentimiento'].value_counts(), labels = etiquetas, colors = colores,
        autopct = '%1.1f%%', shadow = True, startangle = 90)
plt.title('Proceso Constituyente - Sentimientos', fontsize = 20)
plt.axis('equal')
plt.show()

"""Comportamiento de sentimientos por fecha

Exportamos a excel la base de datos con los sentimientos
"""

df.to_excel('BaseSentimientos.xlsx')